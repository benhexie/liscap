/*! For license information please see liscap.min.js.LICENSE.txt */
var liscap;(()=>{var e={452:e=>{var t=new class{constructor(){this.maxListeners={},this.end=!1}addEventListener(e,t,r=(()=>{}),s={}){if(!(e instanceof HTMLElement))throw new Error("Invalid element");if(this.end)throw new Error("You cannot add more listeners");this.maxListeners[e]=(this.maxListeners[e]||0)+1,e.addEventListener=function(t){let r=0;const s=e.addEventListener;return function(n,i,o){if(r>=t[e])throw new Error("Max listeners exceeded");r++,s.call(this,n,i,o)}}(this.maxListeners),e.addEventListener(t,r,s)}removeEventListener(e,t,r,s){if(this.end)throw new Error("You cannot remove more listeners");return e.removeEventListener(t,r,s),this.maxListeners[e]--,this.maxListeners[e]<0&&(this.maxListeners[e]=0),this.maxListeners[e]}lock(){this.end=!0}sayHello(){console.log("Hello from liscap")}};e.exports=t}},t={},r=function r(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,r),i.exports}(452);liscap=r})();